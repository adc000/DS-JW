Terminals unused in grammar

   RELA
   EQLT
   ASNMT
   MULT
   ADDI


State 17 conflicts: 2 shift/reduce
State 19 conflicts: 2 shift/reduce
State 49 conflicts: 7 shift/reduce
State 51 conflicts: 7 shift/reduce
State 52 conflicts: 7 shift/reduce
State 53 conflicts: 7 shift/reduce
State 54 conflicts: 7 shift/reduce
State 55 conflicts: 7 shift/reduce
State 71 conflicts: 7 shift/reduce
State 97 conflicts: 10 shift/reduce
State 98 conflicts: 10 shift/reduce
State 121 conflicts: 1 shift/reduce
State 123 conflicts: 10 shift/reduce
State 124 conflicts: 10 shift/reduce
State 125 conflicts: 10 shift/reduce
State 126 conflicts: 10 shift/reduce
State 127 conflicts: 10 shift/reduce
State 128 conflicts: 10 shift/reduce
State 129 conflicts: 10 shift/reduce
State 130 conflicts: 10 shift/reduce
State 131 conflicts: 10 shift/reduce
State 132 conflicts: 10 shift/reduce
State 139 conflicts: 1 shift/reduce


Grammar

    0 $accept: PROGRAM $end

    1 PROGRAM: DECLARATION FUNCTION
    2        | DECLARATION
    3        | FUNCTION

    4 DECLARATION: INT IDENTIFIER ';' DECLARATION
    5            | FLOAT IDENTIFIER ';' DECLARATION
    6            | INT IDENTIFIER ';'
    7            | FLOAT IDENTIFIER ';'

    8 IDENTIFIER: ID '[' INTNUM ']' ',' IDENTIFIER
    9           | ID ',' IDENTIFIER
   10           | ID '[' INTNUM ']'
   11           | ID

   12 FUNCTION: INT ID '(' PARAMETER ')' COMPOUNDSTMT FUNCTION
   13         | INT ID '(' PARAMETER ')' COMPOUNDSTMT
   14         | FLOAT ID '(' PARAMETER ')' COMPOUNDSTMT FUNCTION
   15         | FLOAT ID '(' PARAMETER ')' COMPOUNDSTMT

   16 PARAMETER: INT IDENTIFIER PARAMETER
   17          | INT IDENTIFIER

   18 COMPOUNDSTMT: '{' DECLARATION STMT '}'
   19             | '{' STMT '}'

   20 STMT: ASSIGN STMT
   21     | ASSIGN
   22     | CALL STMT
   23     | CALL
   24     | RETURN EXPR STMT
   25     | RETURN EXPR
   26     | WHILE_S STMT
   27     | WHILE_S
   28     | FOR_S STMT
   29     | FOR_S
   30     | IF_S STMT
   31     | IF_S
   32     | COMPOUNDSTMT STMT
   33     | COMPOUNDSTMT

   34 ASSIGN: ID '[' EXPR ']' '=' EXPR ';'
   35       | ID '=' EXPR ';'

   36 CALL: ID '(' ARG ')' ';'
   37     | ID '(' ')' ';'

   38 ARG: EXPR ',' ARG
   39    | EXPR

   40 WHILE_S: WHILE '(' EXPR ')' STMT
   41        | DO STMT WHILE '(' EXPR ')' ';'

   42 FOR_S: FOR '(' ASSIGN ';' EXPR ';' ASSIGN ')' STMT

   43 IF_S: IF '(' EXPR ')' STMT ELSE STMT
   44     | IF '(' EXPR ')' STMT

   45 EXPR: INTNUM
   46     | FLOATNUM
   47     | UNOP
   48     | ADDIOP
   49     | MULTOP
   50     | RELAOP
   51     | EQLTOP
   52     | CALL
   53     | '(' EXPR ')'
   54     | ID_S

   55 UNOP: UNARY EXPR

   56 ADDIOP: EXPR '+' EXPR
   57       | EXPR '-' EXPR

   58 MULTOP: EXPR '*' EXPR
   59       | EXPR '/' EXPR

   60 RELAOP: EXPR '>' EXPR
   61       | EXPR '<' EXPR
   62       | EXPR ">=" EXPR
   63       | EXPR "<=" EXPR

   64 EQLTOP: EXPR "==" EXPR
   65       | EXPR "!=" EXPR

   66 ID_S: ID EXPR


Terminals, with rules where they appear

$end (0) 0
'(' (40) 12 13 14 15 36 37 40 41 42 43 44 53
')' (41) 12 13 14 15 36 37 40 41 42 43 44 53
'*' (42) 58
'+' (43) 56
',' (44) 8 9 38
'-' (45) 57
'/' (47) 59
';' (59) 4 5 6 7 34 35 36 37 41 42
'<' (60) 61
'=' (61) 34 35
'>' (62) 60
'[' (91) 8 10 34
']' (93) 8 10 34
'{' (123) 18 19
'}' (125) 18 19
error (256)
INTNUM (258) 8 10 45
FLOATNUM (259) 46
ID (260) 8 9 10 11 12 13 14 15 34 35 36 37 66
INT (261) 4 6 12 13 16 17
FLOAT (262) 5 7 14 15
FOR (263) 42
WHILE (264) 40 41
DO (265) 41
IF (266) 43 44
ELSE (267) 43
RELA (268)
EQLT (269)
RETURN (270) 24 25
ASNMT (271)
MULT (272)
ADDI (273)
UNARY (274) 55
">=" (275) 62
"<=" (276) 63
"==" (277) 64
"!=" (278) 65


Nonterminals, with rules where they appear

$accept (39)
    on left: 0
PROGRAM (40)
    on left: 1 2 3, on right: 0
DECLARATION (41)
    on left: 4 5 6 7, on right: 1 2 4 5 18
IDENTIFIER (42)
    on left: 8 9 10 11, on right: 4 5 6 7 8 9 16 17
FUNCTION (43)
    on left: 12 13 14 15, on right: 1 3 12 14
PARAMETER (44)
    on left: 16 17, on right: 12 13 14 15 16
COMPOUNDSTMT (45)
    on left: 18 19, on right: 12 13 14 15 32 33
STMT (46)
    on left: 20 21 22 23 24 25 26 27 28 29 30 31 32 33, on right: 18
    19 20 22 24 26 28 30 32 40 41 42 43 44
ASSIGN (47)
    on left: 34 35, on right: 20 21 42
CALL (48)
    on left: 36 37, on right: 22 23 52
ARG (49)
    on left: 38 39, on right: 36 38
WHILE_S (50)
    on left: 40 41, on right: 26 27
FOR_S (51)
    on left: 42, on right: 28 29
IF_S (52)
    on left: 43 44, on right: 30 31
EXPR (53)
    on left: 45 46 47 48 49 50 51 52 53 54, on right: 24 25 34 35 38
    39 40 41 42 43 44 53 55 56 57 58 59 60 61 62 63 64 65 66
UNOP (54)
    on left: 55, on right: 47
ADDIOP (55)
    on left: 56 57, on right: 48
MULTOP (56)
    on left: 58 59, on right: 49
RELAOP (57)
    on left: 60 61 62 63, on right: 50
EQLTOP (58)
    on left: 64 65, on right: 51
ID_S (59)
    on left: 66, on right: 54


State 0

    0 $accept: . PROGRAM $end

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2

    PROGRAM      go to state 3
    DECLARATION  go to state 4
    FUNCTION     go to state 5


State 1

    4 DECLARATION: INT . IDENTIFIER ';' DECLARATION
    6            | INT . IDENTIFIER ';'
   12 FUNCTION: INT . ID '(' PARAMETER ')' COMPOUNDSTMT FUNCTION
   13         | INT . ID '(' PARAMETER ')' COMPOUNDSTMT

    ID  shift, and go to state 6

    IDENTIFIER  go to state 7


State 2

    5 DECLARATION: FLOAT . IDENTIFIER ';' DECLARATION
    7            | FLOAT . IDENTIFIER ';'
   14 FUNCTION: FLOAT . ID '(' PARAMETER ')' COMPOUNDSTMT FUNCTION
   15         | FLOAT . ID '(' PARAMETER ')' COMPOUNDSTMT

    ID  shift, and go to state 8

    IDENTIFIER  go to state 9


State 3

    0 $accept: PROGRAM . $end

    $end  shift, and go to state 10


State 4

    1 PROGRAM: DECLARATION . FUNCTION
    2        | DECLARATION .

    INT    shift, and go to state 11
    FLOAT  shift, and go to state 12

    $default  reduce using rule 2 (PROGRAM)

    FUNCTION  go to state 13


State 5

    3 PROGRAM: FUNCTION .

    $default  reduce using rule 3 (PROGRAM)


State 6

    8 IDENTIFIER: ID . '[' INTNUM ']' ',' IDENTIFIER
    9           | ID . ',' IDENTIFIER
   10           | ID . '[' INTNUM ']'
   11           | ID .
   12 FUNCTION: INT ID . '(' PARAMETER ')' COMPOUNDSTMT FUNCTION
   13         | INT ID . '(' PARAMETER ')' COMPOUNDSTMT

    '['  shift, and go to state 14
    ','  shift, and go to state 15
    '('  shift, and go to state 16

    $default  reduce using rule 11 (IDENTIFIER)


State 7

    4 DECLARATION: INT IDENTIFIER . ';' DECLARATION
    6            | INT IDENTIFIER . ';'

    ';'  shift, and go to state 17


State 8

    8 IDENTIFIER: ID . '[' INTNUM ']' ',' IDENTIFIER
    9           | ID . ',' IDENTIFIER
   10           | ID . '[' INTNUM ']'
   11           | ID .
   14 FUNCTION: FLOAT ID . '(' PARAMETER ')' COMPOUNDSTMT FUNCTION
   15         | FLOAT ID . '(' PARAMETER ')' COMPOUNDSTMT

    '['  shift, and go to state 14
    ','  shift, and go to state 15
    '('  shift, and go to state 18

    $default  reduce using rule 11 (IDENTIFIER)


State 9

    5 DECLARATION: FLOAT IDENTIFIER . ';' DECLARATION
    7            | FLOAT IDENTIFIER . ';'

    ';'  shift, and go to state 19


State 10

    0 $accept: PROGRAM $end .

    $default  accept


State 11

   12 FUNCTION: INT . ID '(' PARAMETER ')' COMPOUNDSTMT FUNCTION
   13         | INT . ID '(' PARAMETER ')' COMPOUNDSTMT

    ID  shift, and go to state 20


State 12

   14 FUNCTION: FLOAT . ID '(' PARAMETER ')' COMPOUNDSTMT FUNCTION
   15         | FLOAT . ID '(' PARAMETER ')' COMPOUNDSTMT

    ID  shift, and go to state 21


State 13

    1 PROGRAM: DECLARATION FUNCTION .

    $default  reduce using rule 1 (PROGRAM)


State 14

    8 IDENTIFIER: ID '[' . INTNUM ']' ',' IDENTIFIER
   10           | ID '[' . INTNUM ']'

    INTNUM  shift, and go to state 22


State 15

    9 IDENTIFIER: ID ',' . IDENTIFIER

    ID  shift, and go to state 23

    IDENTIFIER  go to state 24


State 16

   12 FUNCTION: INT ID '(' . PARAMETER ')' COMPOUNDSTMT FUNCTION
   13         | INT ID '(' . PARAMETER ')' COMPOUNDSTMT

    INT  shift, and go to state 25

    PARAMETER  go to state 26


State 17

    4 DECLARATION: INT IDENTIFIER ';' . DECLARATION
    6            | INT IDENTIFIER ';' .

    INT    shift, and go to state 27
    FLOAT  shift, and go to state 28

    INT       [reduce using rule 6 (DECLARATION)]
    FLOAT     [reduce using rule 6 (DECLARATION)]
    $default  reduce using rule 6 (DECLARATION)

    DECLARATION  go to state 29


State 18

   14 FUNCTION: FLOAT ID '(' . PARAMETER ')' COMPOUNDSTMT FUNCTION
   15         | FLOAT ID '(' . PARAMETER ')' COMPOUNDSTMT

    INT  shift, and go to state 25

    PARAMETER  go to state 30


State 19

    5 DECLARATION: FLOAT IDENTIFIER ';' . DECLARATION
    7            | FLOAT IDENTIFIER ';' .

    INT    shift, and go to state 27
    FLOAT  shift, and go to state 28

    INT       [reduce using rule 7 (DECLARATION)]
    FLOAT     [reduce using rule 7 (DECLARATION)]
    $default  reduce using rule 7 (DECLARATION)

    DECLARATION  go to state 31


State 20

   12 FUNCTION: INT ID . '(' PARAMETER ')' COMPOUNDSTMT FUNCTION
   13         | INT ID . '(' PARAMETER ')' COMPOUNDSTMT

    '('  shift, and go to state 16


State 21

   14 FUNCTION: FLOAT ID . '(' PARAMETER ')' COMPOUNDSTMT FUNCTION
   15         | FLOAT ID . '(' PARAMETER ')' COMPOUNDSTMT

    '('  shift, and go to state 18


State 22

    8 IDENTIFIER: ID '[' INTNUM . ']' ',' IDENTIFIER
   10           | ID '[' INTNUM . ']'

    ']'  shift, and go to state 32


State 23

    8 IDENTIFIER: ID . '[' INTNUM ']' ',' IDENTIFIER
    9           | ID . ',' IDENTIFIER
   10           | ID . '[' INTNUM ']'
   11           | ID .

    '['  shift, and go to state 14
    ','  shift, and go to state 15

    $default  reduce using rule 11 (IDENTIFIER)


State 24

    9 IDENTIFIER: ID ',' IDENTIFIER .

    $default  reduce using rule 9 (IDENTIFIER)


State 25

   16 PARAMETER: INT . IDENTIFIER PARAMETER
   17          | INT . IDENTIFIER

    ID  shift, and go to state 23

    IDENTIFIER  go to state 33


State 26

   12 FUNCTION: INT ID '(' PARAMETER . ')' COMPOUNDSTMT FUNCTION
   13         | INT ID '(' PARAMETER . ')' COMPOUNDSTMT

    ')'  shift, and go to state 34


State 27

    4 DECLARATION: INT . IDENTIFIER ';' DECLARATION
    6            | INT . IDENTIFIER ';'

    ID  shift, and go to state 23

    IDENTIFIER  go to state 7


State 28

    5 DECLARATION: FLOAT . IDENTIFIER ';' DECLARATION
    7            | FLOAT . IDENTIFIER ';'

    ID  shift, and go to state 23

    IDENTIFIER  go to state 9


State 29

    4 DECLARATION: INT IDENTIFIER ';' DECLARATION .

    $default  reduce using rule 4 (DECLARATION)


State 30

   14 FUNCTION: FLOAT ID '(' PARAMETER . ')' COMPOUNDSTMT FUNCTION
   15         | FLOAT ID '(' PARAMETER . ')' COMPOUNDSTMT

    ')'  shift, and go to state 35


State 31

    5 DECLARATION: FLOAT IDENTIFIER ';' DECLARATION .

    $default  reduce using rule 5 (DECLARATION)


State 32

    8 IDENTIFIER: ID '[' INTNUM ']' . ',' IDENTIFIER
   10           | ID '[' INTNUM ']' .

    ','  shift, and go to state 36

    $default  reduce using rule 10 (IDENTIFIER)


State 33

   16 PARAMETER: INT IDENTIFIER . PARAMETER
   17          | INT IDENTIFIER .

    INT  shift, and go to state 25

    $default  reduce using rule 17 (PARAMETER)

    PARAMETER  go to state 37


State 34

   12 FUNCTION: INT ID '(' PARAMETER ')' . COMPOUNDSTMT FUNCTION
   13         | INT ID '(' PARAMETER ')' . COMPOUNDSTMT

    '{'  shift, and go to state 38

    COMPOUNDSTMT  go to state 39


State 35

   14 FUNCTION: FLOAT ID '(' PARAMETER ')' . COMPOUNDSTMT FUNCTION
   15         | FLOAT ID '(' PARAMETER ')' . COMPOUNDSTMT

    '{'  shift, and go to state 38

    COMPOUNDSTMT  go to state 40


State 36

    8 IDENTIFIER: ID '[' INTNUM ']' ',' . IDENTIFIER

    ID  shift, and go to state 23

    IDENTIFIER  go to state 41


State 37

   16 PARAMETER: INT IDENTIFIER PARAMETER .

    $default  reduce using rule 16 (PARAMETER)


State 38

   18 COMPOUNDSTMT: '{' . DECLARATION STMT '}'
   19             | '{' . STMT '}'

    ID      shift, and go to state 42
    INT     shift, and go to state 27
    FLOAT   shift, and go to state 28
    FOR     shift, and go to state 43
    WHILE   shift, and go to state 44
    DO      shift, and go to state 45
    IF      shift, and go to state 46
    RETURN  shift, and go to state 47
    '{'     shift, and go to state 38

    DECLARATION   go to state 48
    COMPOUNDSTMT  go to state 49
    STMT          go to state 50
    ASSIGN        go to state 51
    CALL          go to state 52
    WHILE_S       go to state 53
    FOR_S         go to state 54
    IF_S          go to state 55


State 39

   12 FUNCTION: INT ID '(' PARAMETER ')' COMPOUNDSTMT . FUNCTION
   13         | INT ID '(' PARAMETER ')' COMPOUNDSTMT .

    INT    shift, and go to state 11
    FLOAT  shift, and go to state 12

    $default  reduce using rule 13 (FUNCTION)

    FUNCTION  go to state 56


State 40

   14 FUNCTION: FLOAT ID '(' PARAMETER ')' COMPOUNDSTMT . FUNCTION
   15         | FLOAT ID '(' PARAMETER ')' COMPOUNDSTMT .

    INT    shift, and go to state 11
    FLOAT  shift, and go to state 12

    $default  reduce using rule 15 (FUNCTION)

    FUNCTION  go to state 57


State 41

    8 IDENTIFIER: ID '[' INTNUM ']' ',' IDENTIFIER .

    $default  reduce using rule 8 (IDENTIFIER)


State 42

   34 ASSIGN: ID . '[' EXPR ']' '=' EXPR ';'
   35       | ID . '=' EXPR ';'
   36 CALL: ID . '(' ARG ')' ';'
   37     | ID . '(' ')' ';'

    '['  shift, and go to state 58
    '('  shift, and go to state 59
    '='  shift, and go to state 60


State 43

   42 FOR_S: FOR . '(' ASSIGN ';' EXPR ';' ASSIGN ')' STMT

    '('  shift, and go to state 61


State 44

   40 WHILE_S: WHILE . '(' EXPR ')' STMT

    '('  shift, and go to state 62


State 45

   41 WHILE_S: DO . STMT WHILE '(' EXPR ')' ';'

    ID      shift, and go to state 42
    FOR     shift, and go to state 43
    WHILE   shift, and go to state 44
    DO      shift, and go to state 45
    IF      shift, and go to state 46
    RETURN  shift, and go to state 47
    '{'     shift, and go to state 38

    COMPOUNDSTMT  go to state 49
    STMT          go to state 63
    ASSIGN        go to state 51
    CALL          go to state 52
    WHILE_S       go to state 53
    FOR_S         go to state 54
    IF_S          go to state 55


State 46

   43 IF_S: IF . '(' EXPR ')' STMT ELSE STMT
   44     | IF . '(' EXPR ')' STMT

    '('  shift, and go to state 64


State 47

   24 STMT: RETURN . EXPR STMT
   25     | RETURN . EXPR

    INTNUM    shift, and go to state 65
    FLOATNUM  shift, and go to state 66
    ID        shift, and go to state 67
    UNARY     shift, and go to state 68
    '('       shift, and go to state 69

    CALL    go to state 70
    EXPR    go to state 71
    UNOP    go to state 72
    ADDIOP  go to state 73
    MULTOP  go to state 74
    RELAOP  go to state 75
    EQLTOP  go to state 76
    ID_S    go to state 77


State 48

   18 COMPOUNDSTMT: '{' DECLARATION . STMT '}'

    ID      shift, and go to state 42
    FOR     shift, and go to state 43
    WHILE   shift, and go to state 44
    DO      shift, and go to state 45
    IF      shift, and go to state 46
    RETURN  shift, and go to state 47
    '{'     shift, and go to state 38

    COMPOUNDSTMT  go to state 49
    STMT          go to state 78
    ASSIGN        go to state 51
    CALL          go to state 52
    WHILE_S       go to state 53
    FOR_S         go to state 54
    IF_S          go to state 55


State 49

   32 STMT: COMPOUNDSTMT . STMT
   33     | COMPOUNDSTMT .

    ID      shift, and go to state 42
    FOR     shift, and go to state 43
    WHILE   shift, and go to state 44
    DO      shift, and go to state 45
    IF      shift, and go to state 46
    RETURN  shift, and go to state 47
    '{'     shift, and go to state 38

    ID        [reduce using rule 33 (STMT)]
    FOR       [reduce using rule 33 (STMT)]
    WHILE     [reduce using rule 33 (STMT)]
    DO        [reduce using rule 33 (STMT)]
    IF        [reduce using rule 33 (STMT)]
    RETURN    [reduce using rule 33 (STMT)]
    '{'       [reduce using rule 33 (STMT)]
    $default  reduce using rule 33 (STMT)

    COMPOUNDSTMT  go to state 49
    STMT          go to state 79
    ASSIGN        go to state 51
    CALL          go to state 52
    WHILE_S       go to state 53
    FOR_S         go to state 54
    IF_S          go to state 55


State 50

   19 COMPOUNDSTMT: '{' STMT . '}'

    '}'  shift, and go to state 80


State 51

   20 STMT: ASSIGN . STMT
   21     | ASSIGN .

    ID      shift, and go to state 42
    FOR     shift, and go to state 43
    WHILE   shift, and go to state 44
    DO      shift, and go to state 45
    IF      shift, and go to state 46
    RETURN  shift, and go to state 47
    '{'     shift, and go to state 38

    ID        [reduce using rule 21 (STMT)]
    FOR       [reduce using rule 21 (STMT)]
    WHILE     [reduce using rule 21 (STMT)]
    DO        [reduce using rule 21 (STMT)]
    IF        [reduce using rule 21 (STMT)]
    RETURN    [reduce using rule 21 (STMT)]
    '{'       [reduce using rule 21 (STMT)]
    $default  reduce using rule 21 (STMT)

    COMPOUNDSTMT  go to state 49
    STMT          go to state 81
    ASSIGN        go to state 51
    CALL          go to state 52
    WHILE_S       go to state 53
    FOR_S         go to state 54
    IF_S          go to state 55


State 52

   22 STMT: CALL . STMT
   23     | CALL .

    ID      shift, and go to state 42
    FOR     shift, and go to state 43
    WHILE   shift, and go to state 44
    DO      shift, and go to state 45
    IF      shift, and go to state 46
    RETURN  shift, and go to state 47
    '{'     shift, and go to state 38

    ID        [reduce using rule 23 (STMT)]
    FOR       [reduce using rule 23 (STMT)]
    WHILE     [reduce using rule 23 (STMT)]
    DO        [reduce using rule 23 (STMT)]
    IF        [reduce using rule 23 (STMT)]
    RETURN    [reduce using rule 23 (STMT)]
    '{'       [reduce using rule 23 (STMT)]
    $default  reduce using rule 23 (STMT)

    COMPOUNDSTMT  go to state 49
    STMT          go to state 82
    ASSIGN        go to state 51
    CALL          go to state 52
    WHILE_S       go to state 53
    FOR_S         go to state 54
    IF_S          go to state 55


State 53

   26 STMT: WHILE_S . STMT
   27     | WHILE_S .

    ID      shift, and go to state 42
    FOR     shift, and go to state 43
    WHILE   shift, and go to state 44
    DO      shift, and go to state 45
    IF      shift, and go to state 46
    RETURN  shift, and go to state 47
    '{'     shift, and go to state 38

    ID        [reduce using rule 27 (STMT)]
    FOR       [reduce using rule 27 (STMT)]
    WHILE     [reduce using rule 27 (STMT)]
    DO        [reduce using rule 27 (STMT)]
    IF        [reduce using rule 27 (STMT)]
    RETURN    [reduce using rule 27 (STMT)]
    '{'       [reduce using rule 27 (STMT)]
    $default  reduce using rule 27 (STMT)

    COMPOUNDSTMT  go to state 49
    STMT          go to state 83
    ASSIGN        go to state 51
    CALL          go to state 52
    WHILE_S       go to state 53
    FOR_S         go to state 54
    IF_S          go to state 55


State 54

   28 STMT: FOR_S . STMT
   29     | FOR_S .

    ID      shift, and go to state 42
    FOR     shift, and go to state 43
    WHILE   shift, and go to state 44
    DO      shift, and go to state 45
    IF      shift, and go to state 46
    RETURN  shift, and go to state 47
    '{'     shift, and go to state 38

    ID        [reduce using rule 29 (STMT)]
    FOR       [reduce using rule 29 (STMT)]
    WHILE     [reduce using rule 29 (STMT)]
    DO        [reduce using rule 29 (STMT)]
    IF        [reduce using rule 29 (STMT)]
    RETURN    [reduce using rule 29 (STMT)]
    '{'       [reduce using rule 29 (STMT)]
    $default  reduce using rule 29 (STMT)

    COMPOUNDSTMT  go to state 49
    STMT          go to state 84
    ASSIGN        go to state 51
    CALL          go to state 52
    WHILE_S       go to state 53
    FOR_S         go to state 54
    IF_S          go to state 55


State 55

   30 STMT: IF_S . STMT
   31     | IF_S .

    ID      shift, and go to state 42
    FOR     shift, and go to state 43
    WHILE   shift, and go to state 44
    DO      shift, and go to state 45
    IF      shift, and go to state 46
    RETURN  shift, and go to state 47
    '{'     shift, and go to state 38

    ID        [reduce using rule 31 (STMT)]
    FOR       [reduce using rule 31 (STMT)]
    WHILE     [reduce using rule 31 (STMT)]
    DO        [reduce using rule 31 (STMT)]
    IF        [reduce using rule 31 (STMT)]
    RETURN    [reduce using rule 31 (STMT)]
    '{'       [reduce using rule 31 (STMT)]
    $default  reduce using rule 31 (STMT)

    COMPOUNDSTMT  go to state 49
    STMT          go to state 85
    ASSIGN        go to state 51
    CALL          go to state 52
    WHILE_S       go to state 53
    FOR_S         go to state 54
    IF_S          go to state 55


State 56

   12 FUNCTION: INT ID '(' PARAMETER ')' COMPOUNDSTMT FUNCTION .

    $default  reduce using rule 12 (FUNCTION)


State 57

   14 FUNCTION: FLOAT ID '(' PARAMETER ')' COMPOUNDSTMT FUNCTION .

    $default  reduce using rule 14 (FUNCTION)


State 58

   34 ASSIGN: ID '[' . EXPR ']' '=' EXPR ';'

    INTNUM    shift, and go to state 65
    FLOATNUM  shift, and go to state 66
    ID        shift, and go to state 67
    UNARY     shift, and go to state 68
    '('       shift, and go to state 69

    CALL    go to state 70
    EXPR    go to state 86
    UNOP    go to state 72
    ADDIOP  go to state 73
    MULTOP  go to state 74
    RELAOP  go to state 75
    EQLTOP  go to state 76
    ID_S    go to state 77


State 59

   36 CALL: ID '(' . ARG ')' ';'
   37     | ID '(' . ')' ';'

    INTNUM    shift, and go to state 65
    FLOATNUM  shift, and go to state 66
    ID        shift, and go to state 67
    UNARY     shift, and go to state 68
    '('       shift, and go to state 69
    ')'       shift, and go to state 87

    CALL    go to state 70
    ARG     go to state 88
    EXPR    go to state 89
    UNOP    go to state 72
    ADDIOP  go to state 73
    MULTOP  go to state 74
    RELAOP  go to state 75
    EQLTOP  go to state 76
    ID_S    go to state 77


State 60

   35 ASSIGN: ID '=' . EXPR ';'

    INTNUM    shift, and go to state 65
    FLOATNUM  shift, and go to state 66
    ID        shift, and go to state 67
    UNARY     shift, and go to state 68
    '('       shift, and go to state 69

    CALL    go to state 70
    EXPR    go to state 90
    UNOP    go to state 72
    ADDIOP  go to state 73
    MULTOP  go to state 74
    RELAOP  go to state 75
    EQLTOP  go to state 76
    ID_S    go to state 77


State 61

   42 FOR_S: FOR '(' . ASSIGN ';' EXPR ';' ASSIGN ')' STMT

    ID  shift, and go to state 91

    ASSIGN  go to state 92


State 62

   40 WHILE_S: WHILE '(' . EXPR ')' STMT

    INTNUM    shift, and go to state 65
    FLOATNUM  shift, and go to state 66
    ID        shift, and go to state 67
    UNARY     shift, and go to state 68
    '('       shift, and go to state 69

    CALL    go to state 70
    EXPR    go to state 93
    UNOP    go to state 72
    ADDIOP  go to state 73
    MULTOP  go to state 74
    RELAOP  go to state 75
    EQLTOP  go to state 76
    ID_S    go to state 77


State 63

   41 WHILE_S: DO STMT . WHILE '(' EXPR ')' ';'

    WHILE  shift, and go to state 94


State 64

   43 IF_S: IF '(' . EXPR ')' STMT ELSE STMT
   44     | IF '(' . EXPR ')' STMT

    INTNUM    shift, and go to state 65
    FLOATNUM  shift, and go to state 66
    ID        shift, and go to state 67
    UNARY     shift, and go to state 68
    '('       shift, and go to state 69

    CALL    go to state 70
    EXPR    go to state 95
    UNOP    go to state 72
    ADDIOP  go to state 73
    MULTOP  go to state 74
    RELAOP  go to state 75
    EQLTOP  go to state 76
    ID_S    go to state 77


State 65

   45 EXPR: INTNUM .

    $default  reduce using rule 45 (EXPR)


State 66

   46 EXPR: FLOATNUM .

    $default  reduce using rule 46 (EXPR)


State 67

   36 CALL: ID . '(' ARG ')' ';'
   37     | ID . '(' ')' ';'
   66 ID_S: ID . EXPR

    INTNUM    shift, and go to state 65
    FLOATNUM  shift, and go to state 66
    ID        shift, and go to state 67
    UNARY     shift, and go to state 68
    '('       shift, and go to state 96

    CALL    go to state 70
    EXPR    go to state 97
    UNOP    go to state 72
    ADDIOP  go to state 73
    MULTOP  go to state 74
    RELAOP  go to state 75
    EQLTOP  go to state 76
    ID_S    go to state 77


State 68

   55 UNOP: UNARY . EXPR

    INTNUM    shift, and go to state 65
    FLOATNUM  shift, and go to state 66
    ID        shift, and go to state 67
    UNARY     shift, and go to state 68
    '('       shift, and go to state 69

    CALL    go to state 70
    EXPR    go to state 98
    UNOP    go to state 72
    ADDIOP  go to state 73
    MULTOP  go to state 74
    RELAOP  go to state 75
    EQLTOP  go to state 76
    ID_S    go to state 77


State 69

   53 EXPR: '(' . EXPR ')'

    INTNUM    shift, and go to state 65
    FLOATNUM  shift, and go to state 66
    ID        shift, and go to state 67
    UNARY     shift, and go to state 68
    '('       shift, and go to state 69

    CALL    go to state 70
    EXPR    go to state 99
    UNOP    go to state 72
    ADDIOP  go to state 73
    MULTOP  go to state 74
    RELAOP  go to state 75
    EQLTOP  go to state 76
    ID_S    go to state 77


State 70

   52 EXPR: CALL .

    $default  reduce using rule 52 (EXPR)


State 71

   24 STMT: RETURN EXPR . STMT
   25     | RETURN EXPR .
   56 ADDIOP: EXPR . '+' EXPR
   57       | EXPR . '-' EXPR
   58 MULTOP: EXPR . '*' EXPR
   59       | EXPR . '/' EXPR
   60 RELAOP: EXPR . '>' EXPR
   61       | EXPR . '<' EXPR
   62       | EXPR . ">=" EXPR
   63       | EXPR . "<=" EXPR
   64 EQLTOP: EXPR . "==" EXPR
   65       | EXPR . "!=" EXPR

    ID      shift, and go to state 42
    FOR     shift, and go to state 43
    WHILE   shift, and go to state 44
    DO      shift, and go to state 45
    IF      shift, and go to state 46
    RETURN  shift, and go to state 47
    '{'     shift, and go to state 38
    '+'     shift, and go to state 100
    '-'     shift, and go to state 101
    '*'     shift, and go to state 102
    '/'     shift, and go to state 103
    '>'     shift, and go to state 104
    '<'     shift, and go to state 105
    ">="    shift, and go to state 106
    "<="    shift, and go to state 107
    "=="    shift, and go to state 108
    "!="    shift, and go to state 109

    ID        [reduce using rule 25 (STMT)]
    FOR       [reduce using rule 25 (STMT)]
    WHILE     [reduce using rule 25 (STMT)]
    DO        [reduce using rule 25 (STMT)]
    IF        [reduce using rule 25 (STMT)]
    RETURN    [reduce using rule 25 (STMT)]
    '{'       [reduce using rule 25 (STMT)]
    $default  reduce using rule 25 (STMT)

    COMPOUNDSTMT  go to state 49
    STMT          go to state 110
    ASSIGN        go to state 51
    CALL          go to state 52
    WHILE_S       go to state 53
    FOR_S         go to state 54
    IF_S          go to state 55


State 72

   47 EXPR: UNOP .

    $default  reduce using rule 47 (EXPR)


State 73

   48 EXPR: ADDIOP .

    $default  reduce using rule 48 (EXPR)


State 74

   49 EXPR: MULTOP .

    $default  reduce using rule 49 (EXPR)


State 75

   50 EXPR: RELAOP .

    $default  reduce using rule 50 (EXPR)


State 76

   51 EXPR: EQLTOP .

    $default  reduce using rule 51 (EXPR)


State 77

   54 EXPR: ID_S .

    $default  reduce using rule 54 (EXPR)


State 78

   18 COMPOUNDSTMT: '{' DECLARATION STMT . '}'

    '}'  shift, and go to state 111


State 79

   32 STMT: COMPOUNDSTMT STMT .

    $default  reduce using rule 32 (STMT)


State 80

   19 COMPOUNDSTMT: '{' STMT '}' .

    $default  reduce using rule 19 (COMPOUNDSTMT)


State 81

   20 STMT: ASSIGN STMT .

    $default  reduce using rule 20 (STMT)


State 82

   22 STMT: CALL STMT .

    $default  reduce using rule 22 (STMT)


State 83

   26 STMT: WHILE_S STMT .

    $default  reduce using rule 26 (STMT)


State 84

   28 STMT: FOR_S STMT .

    $default  reduce using rule 28 (STMT)


State 85

   30 STMT: IF_S STMT .

    $default  reduce using rule 30 (STMT)


State 86

   34 ASSIGN: ID '[' EXPR . ']' '=' EXPR ';'
   56 ADDIOP: EXPR . '+' EXPR
   57       | EXPR . '-' EXPR
   58 MULTOP: EXPR . '*' EXPR
   59       | EXPR . '/' EXPR
   60 RELAOP: EXPR . '>' EXPR
   61       | EXPR . '<' EXPR
   62       | EXPR . ">=" EXPR
   63       | EXPR . "<=" EXPR
   64 EQLTOP: EXPR . "==" EXPR
   65       | EXPR . "!=" EXPR

    ']'   shift, and go to state 112
    '+'   shift, and go to state 100
    '-'   shift, and go to state 101
    '*'   shift, and go to state 102
    '/'   shift, and go to state 103
    '>'   shift, and go to state 104
    '<'   shift, and go to state 105
    ">="  shift, and go to state 106
    "<="  shift, and go to state 107
    "=="  shift, and go to state 108
    "!="  shift, and go to state 109


State 87

   37 CALL: ID '(' ')' . ';'

    ';'  shift, and go to state 113


State 88

   36 CALL: ID '(' ARG . ')' ';'

    ')'  shift, and go to state 114


State 89

   38 ARG: EXPR . ',' ARG
   39    | EXPR .
   56 ADDIOP: EXPR . '+' EXPR
   57       | EXPR . '-' EXPR
   58 MULTOP: EXPR . '*' EXPR
   59       | EXPR . '/' EXPR
   60 RELAOP: EXPR . '>' EXPR
   61       | EXPR . '<' EXPR
   62       | EXPR . ">=" EXPR
   63       | EXPR . "<=" EXPR
   64 EQLTOP: EXPR . "==" EXPR
   65       | EXPR . "!=" EXPR

    ','   shift, and go to state 115
    '+'   shift, and go to state 100
    '-'   shift, and go to state 101
    '*'   shift, and go to state 102
    '/'   shift, and go to state 103
    '>'   shift, and go to state 104
    '<'   shift, and go to state 105
    ">="  shift, and go to state 106
    "<="  shift, and go to state 107
    "=="  shift, and go to state 108
    "!="  shift, and go to state 109

    $default  reduce using rule 39 (ARG)


State 90

   35 ASSIGN: ID '=' EXPR . ';'
   56 ADDIOP: EXPR . '+' EXPR
   57       | EXPR . '-' EXPR
   58 MULTOP: EXPR . '*' EXPR
   59       | EXPR . '/' EXPR
   60 RELAOP: EXPR . '>' EXPR
   61       | EXPR . '<' EXPR
   62       | EXPR . ">=" EXPR
   63       | EXPR . "<=" EXPR
   64 EQLTOP: EXPR . "==" EXPR
   65       | EXPR . "!=" EXPR

    ';'   shift, and go to state 116
    '+'   shift, and go to state 100
    '-'   shift, and go to state 101
    '*'   shift, and go to state 102
    '/'   shift, and go to state 103
    '>'   shift, and go to state 104
    '<'   shift, and go to state 105
    ">="  shift, and go to state 106
    "<="  shift, and go to state 107
    "=="  shift, and go to state 108
    "!="  shift, and go to state 109


State 91

   34 ASSIGN: ID . '[' EXPR ']' '=' EXPR ';'
   35       | ID . '=' EXPR ';'

    '['  shift, and go to state 58
    '='  shift, and go to state 60


State 92

   42 FOR_S: FOR '(' ASSIGN . ';' EXPR ';' ASSIGN ')' STMT

    ';'  shift, and go to state 117


State 93

   40 WHILE_S: WHILE '(' EXPR . ')' STMT
   56 ADDIOP: EXPR . '+' EXPR
   57       | EXPR . '-' EXPR
   58 MULTOP: EXPR . '*' EXPR
   59       | EXPR . '/' EXPR
   60 RELAOP: EXPR . '>' EXPR
   61       | EXPR . '<' EXPR
   62       | EXPR . ">=" EXPR
   63       | EXPR . "<=" EXPR
   64 EQLTOP: EXPR . "==" EXPR
   65       | EXPR . "!=" EXPR

    ')'   shift, and go to state 118
    '+'   shift, and go to state 100
    '-'   shift, and go to state 101
    '*'   shift, and go to state 102
    '/'   shift, and go to state 103
    '>'   shift, and go to state 104
    '<'   shift, and go to state 105
    ">="  shift, and go to state 106
    "<="  shift, and go to state 107
    "=="  shift, and go to state 108
    "!="  shift, and go to state 109


State 94

   41 WHILE_S: DO STMT WHILE . '(' EXPR ')' ';'

    '('  shift, and go to state 119


State 95

   43 IF_S: IF '(' EXPR . ')' STMT ELSE STMT
   44     | IF '(' EXPR . ')' STMT
   56 ADDIOP: EXPR . '+' EXPR
   57       | EXPR . '-' EXPR
   58 MULTOP: EXPR . '*' EXPR
   59       | EXPR . '/' EXPR
   60 RELAOP: EXPR . '>' EXPR
   61       | EXPR . '<' EXPR
   62       | EXPR . ">=" EXPR
   63       | EXPR . "<=" EXPR
   64 EQLTOP: EXPR . "==" EXPR
   65       | EXPR . "!=" EXPR

    ')'   shift, and go to state 120
    '+'   shift, and go to state 100
    '-'   shift, and go to state 101
    '*'   shift, and go to state 102
    '/'   shift, and go to state 103
    '>'   shift, and go to state 104
    '<'   shift, and go to state 105
    ">="  shift, and go to state 106
    "<="  shift, and go to state 107
    "=="  shift, and go to state 108
    "!="  shift, and go to state 109


State 96

   36 CALL: ID '(' . ARG ')' ';'
   37     | ID '(' . ')' ';'
   53 EXPR: '(' . EXPR ')'

    INTNUM    shift, and go to state 65
    FLOATNUM  shift, and go to state 66
    ID        shift, and go to state 67
    UNARY     shift, and go to state 68
    '('       shift, and go to state 69
    ')'       shift, and go to state 87

    CALL    go to state 70
    ARG     go to state 88
    EXPR    go to state 121
    UNOP    go to state 72
    ADDIOP  go to state 73
    MULTOP  go to state 74
    RELAOP  go to state 75
    EQLTOP  go to state 76
    ID_S    go to state 77


State 97

   56 ADDIOP: EXPR . '+' EXPR
   57       | EXPR . '-' EXPR
   58 MULTOP: EXPR . '*' EXPR
   59       | EXPR . '/' EXPR
   60 RELAOP: EXPR . '>' EXPR
   61       | EXPR . '<' EXPR
   62       | EXPR . ">=" EXPR
   63       | EXPR . "<=" EXPR
   64 EQLTOP: EXPR . "==" EXPR
   65       | EXPR . "!=" EXPR
   66 ID_S: ID EXPR .

    '+'   shift, and go to state 100
    '-'   shift, and go to state 101
    '*'   shift, and go to state 102
    '/'   shift, and go to state 103
    '>'   shift, and go to state 104
    '<'   shift, and go to state 105
    ">="  shift, and go to state 106
    "<="  shift, and go to state 107
    "=="  shift, and go to state 108
    "!="  shift, and go to state 109

    '+'       [reduce using rule 66 (ID_S)]
    '-'       [reduce using rule 66 (ID_S)]
    '*'       [reduce using rule 66 (ID_S)]
    '/'       [reduce using rule 66 (ID_S)]
    '>'       [reduce using rule 66 (ID_S)]
    '<'       [reduce using rule 66 (ID_S)]
    ">="      [reduce using rule 66 (ID_S)]
    "<="      [reduce using rule 66 (ID_S)]
    "=="      [reduce using rule 66 (ID_S)]
    "!="      [reduce using rule 66 (ID_S)]
    $default  reduce using rule 66 (ID_S)


State 98

   55 UNOP: UNARY EXPR .
   56 ADDIOP: EXPR . '+' EXPR
   57       | EXPR . '-' EXPR
   58 MULTOP: EXPR . '*' EXPR
   59       | EXPR . '/' EXPR
   60 RELAOP: EXPR . '>' EXPR
   61       | EXPR . '<' EXPR
   62       | EXPR . ">=" EXPR
   63       | EXPR . "<=" EXPR
   64 EQLTOP: EXPR . "==" EXPR
   65       | EXPR . "!=" EXPR

    '+'   shift, and go to state 100
    '-'   shift, and go to state 101
    '*'   shift, and go to state 102
    '/'   shift, and go to state 103
    '>'   shift, and go to state 104
    '<'   shift, and go to state 105
    ">="  shift, and go to state 106
    "<="  shift, and go to state 107
    "=="  shift, and go to state 108
    "!="  shift, and go to state 109

    '+'       [reduce using rule 55 (UNOP)]
    '-'       [reduce using rule 55 (UNOP)]
    '*'       [reduce using rule 55 (UNOP)]
    '/'       [reduce using rule 55 (UNOP)]
    '>'       [reduce using rule 55 (UNOP)]
    '<'       [reduce using rule 55 (UNOP)]
    ">="      [reduce using rule 55 (UNOP)]
    "<="      [reduce using rule 55 (UNOP)]
    "=="      [reduce using rule 55 (UNOP)]
    "!="      [reduce using rule 55 (UNOP)]
    $default  reduce using rule 55 (UNOP)


State 99

   53 EXPR: '(' EXPR . ')'
   56 ADDIOP: EXPR . '+' EXPR
   57       | EXPR . '-' EXPR
   58 MULTOP: EXPR . '*' EXPR
   59       | EXPR . '/' EXPR
   60 RELAOP: EXPR . '>' EXPR
   61       | EXPR . '<' EXPR
   62       | EXPR . ">=" EXPR
   63       | EXPR . "<=" EXPR
   64 EQLTOP: EXPR . "==" EXPR
   65       | EXPR . "!=" EXPR

    ')'   shift, and go to state 122
    '+'   shift, and go to state 100
    '-'   shift, and go to state 101
    '*'   shift, and go to state 102
    '/'   shift, and go to state 103
    '>'   shift, and go to state 104
    '<'   shift, and go to state 105
    ">="  shift, and go to state 106
    "<="  shift, and go to state 107
    "=="  shift, and go to state 108
    "!="  shift, and go to state 109


State 100

   56 ADDIOP: EXPR '+' . EXPR

    INTNUM    shift, and go to state 65
    FLOATNUM  shift, and go to state 66
    ID        shift, and go to state 67
    UNARY     shift, and go to state 68
    '('       shift, and go to state 69

    CALL    go to state 70
    EXPR    go to state 123
    UNOP    go to state 72
    ADDIOP  go to state 73
    MULTOP  go to state 74
    RELAOP  go to state 75
    EQLTOP  go to state 76
    ID_S    go to state 77


State 101

   57 ADDIOP: EXPR '-' . EXPR

    INTNUM    shift, and go to state 65
    FLOATNUM  shift, and go to state 66
    ID        shift, and go to state 67
    UNARY     shift, and go to state 68
    '('       shift, and go to state 69

    CALL    go to state 70
    EXPR    go to state 124
    UNOP    go to state 72
    ADDIOP  go to state 73
    MULTOP  go to state 74
    RELAOP  go to state 75
    EQLTOP  go to state 76
    ID_S    go to state 77


State 102

   58 MULTOP: EXPR '*' . EXPR

    INTNUM    shift, and go to state 65
    FLOATNUM  shift, and go to state 66
    ID        shift, and go to state 67
    UNARY     shift, and go to state 68
    '('       shift, and go to state 69

    CALL    go to state 70
    EXPR    go to state 125
    UNOP    go to state 72
    ADDIOP  go to state 73
    MULTOP  go to state 74
    RELAOP  go to state 75
    EQLTOP  go to state 76
    ID_S    go to state 77


State 103

   59 MULTOP: EXPR '/' . EXPR

    INTNUM    shift, and go to state 65
    FLOATNUM  shift, and go to state 66
    ID        shift, and go to state 67
    UNARY     shift, and go to state 68
    '('       shift, and go to state 69

    CALL    go to state 70
    EXPR    go to state 126
    UNOP    go to state 72
    ADDIOP  go to state 73
    MULTOP  go to state 74
    RELAOP  go to state 75
    EQLTOP  go to state 76
    ID_S    go to state 77


State 104

   60 RELAOP: EXPR '>' . EXPR

    INTNUM    shift, and go to state 65
    FLOATNUM  shift, and go to state 66
    ID        shift, and go to state 67
    UNARY     shift, and go to state 68
    '('       shift, and go to state 69

    CALL    go to state 70
    EXPR    go to state 127
    UNOP    go to state 72
    ADDIOP  go to state 73
    MULTOP  go to state 74
    RELAOP  go to state 75
    EQLTOP  go to state 76
    ID_S    go to state 77


State 105

   61 RELAOP: EXPR '<' . EXPR

    INTNUM    shift, and go to state 65
    FLOATNUM  shift, and go to state 66
    ID        shift, and go to state 67
    UNARY     shift, and go to state 68
    '('       shift, and go to state 69

    CALL    go to state 70
    EXPR    go to state 128
    UNOP    go to state 72
    ADDIOP  go to state 73
    MULTOP  go to state 74
    RELAOP  go to state 75
    EQLTOP  go to state 76
    ID_S    go to state 77


State 106

   62 RELAOP: EXPR ">=" . EXPR

    INTNUM    shift, and go to state 65
    FLOATNUM  shift, and go to state 66
    ID        shift, and go to state 67
    UNARY     shift, and go to state 68
    '('       shift, and go to state 69

    CALL    go to state 70
    EXPR    go to state 129
    UNOP    go to state 72
    ADDIOP  go to state 73
    MULTOP  go to state 74
    RELAOP  go to state 75
    EQLTOP  go to state 76
    ID_S    go to state 77


State 107

   63 RELAOP: EXPR "<=" . EXPR

    INTNUM    shift, and go to state 65
    FLOATNUM  shift, and go to state 66
    ID        shift, and go to state 67
    UNARY     shift, and go to state 68
    '('       shift, and go to state 69

    CALL    go to state 70
    EXPR    go to state 130
    UNOP    go to state 72
    ADDIOP  go to state 73
    MULTOP  go to state 74
    RELAOP  go to state 75
    EQLTOP  go to state 76
    ID_S    go to state 77


State 108

   64 EQLTOP: EXPR "==" . EXPR

    INTNUM    shift, and go to state 65
    FLOATNUM  shift, and go to state 66
    ID        shift, and go to state 67
    UNARY     shift, and go to state 68
    '('       shift, and go to state 69

    CALL    go to state 70
    EXPR    go to state 131
    UNOP    go to state 72
    ADDIOP  go to state 73
    MULTOP  go to state 74
    RELAOP  go to state 75
    EQLTOP  go to state 76
    ID_S    go to state 77


State 109

   65 EQLTOP: EXPR "!=" . EXPR

    INTNUM    shift, and go to state 65
    FLOATNUM  shift, and go to state 66
    ID        shift, and go to state 67
    UNARY     shift, and go to state 68
    '('       shift, and go to state 69

    CALL    go to state 70
    EXPR    go to state 132
    UNOP    go to state 72
    ADDIOP  go to state 73
    MULTOP  go to state 74
    RELAOP  go to state 75
    EQLTOP  go to state 76
    ID_S    go to state 77


State 110

   24 STMT: RETURN EXPR STMT .

    $default  reduce using rule 24 (STMT)


State 111

   18 COMPOUNDSTMT: '{' DECLARATION STMT '}' .

    $default  reduce using rule 18 (COMPOUNDSTMT)


State 112

   34 ASSIGN: ID '[' EXPR ']' . '=' EXPR ';'

    '='  shift, and go to state 133


State 113

   37 CALL: ID '(' ')' ';' .

    $default  reduce using rule 37 (CALL)


State 114

   36 CALL: ID '(' ARG ')' . ';'

    ';'  shift, and go to state 134


State 115

   38 ARG: EXPR ',' . ARG

    INTNUM    shift, and go to state 65
    FLOATNUM  shift, and go to state 66
    ID        shift, and go to state 67
    UNARY     shift, and go to state 68
    '('       shift, and go to state 69

    CALL    go to state 70
    ARG     go to state 135
    EXPR    go to state 89
    UNOP    go to state 72
    ADDIOP  go to state 73
    MULTOP  go to state 74
    RELAOP  go to state 75
    EQLTOP  go to state 76
    ID_S    go to state 77


State 116

   35 ASSIGN: ID '=' EXPR ';' .

    $default  reduce using rule 35 (ASSIGN)


State 117

   42 FOR_S: FOR '(' ASSIGN ';' . EXPR ';' ASSIGN ')' STMT

    INTNUM    shift, and go to state 65
    FLOATNUM  shift, and go to state 66
    ID        shift, and go to state 67
    UNARY     shift, and go to state 68
    '('       shift, and go to state 69

    CALL    go to state 70
    EXPR    go to state 136
    UNOP    go to state 72
    ADDIOP  go to state 73
    MULTOP  go to state 74
    RELAOP  go to state 75
    EQLTOP  go to state 76
    ID_S    go to state 77


State 118

   40 WHILE_S: WHILE '(' EXPR ')' . STMT

    ID      shift, and go to state 42
    FOR     shift, and go to state 43
    WHILE   shift, and go to state 44
    DO      shift, and go to state 45
    IF      shift, and go to state 46
    RETURN  shift, and go to state 47
    '{'     shift, and go to state 38

    COMPOUNDSTMT  go to state 49
    STMT          go to state 137
    ASSIGN        go to state 51
    CALL          go to state 52
    WHILE_S       go to state 53
    FOR_S         go to state 54
    IF_S          go to state 55


State 119

   41 WHILE_S: DO STMT WHILE '(' . EXPR ')' ';'

    INTNUM    shift, and go to state 65
    FLOATNUM  shift, and go to state 66
    ID        shift, and go to state 67
    UNARY     shift, and go to state 68
    '('       shift, and go to state 69

    CALL    go to state 70
    EXPR    go to state 138
    UNOP    go to state 72
    ADDIOP  go to state 73
    MULTOP  go to state 74
    RELAOP  go to state 75
    EQLTOP  go to state 76
    ID_S    go to state 77


State 120

   43 IF_S: IF '(' EXPR ')' . STMT ELSE STMT
   44     | IF '(' EXPR ')' . STMT

    ID      shift, and go to state 42
    FOR     shift, and go to state 43
    WHILE   shift, and go to state 44
    DO      shift, and go to state 45
    IF      shift, and go to state 46
    RETURN  shift, and go to state 47
    '{'     shift, and go to state 38

    COMPOUNDSTMT  go to state 49
    STMT          go to state 139
    ASSIGN        go to state 51
    CALL          go to state 52
    WHILE_S       go to state 53
    FOR_S         go to state 54
    IF_S          go to state 55


State 121

   38 ARG: EXPR . ',' ARG
   39    | EXPR .
   53 EXPR: '(' EXPR . ')'
   56 ADDIOP: EXPR . '+' EXPR
   57       | EXPR . '-' EXPR
   58 MULTOP: EXPR . '*' EXPR
   59       | EXPR . '/' EXPR
   60 RELAOP: EXPR . '>' EXPR
   61       | EXPR . '<' EXPR
   62       | EXPR . ">=" EXPR
   63       | EXPR . "<=" EXPR
   64 EQLTOP: EXPR . "==" EXPR
   65       | EXPR . "!=" EXPR

    ','   shift, and go to state 115
    ')'   shift, and go to state 122
    '+'   shift, and go to state 100
    '-'   shift, and go to state 101
    '*'   shift, and go to state 102
    '/'   shift, and go to state 103
    '>'   shift, and go to state 104
    '<'   shift, and go to state 105
    ">="  shift, and go to state 106
    "<="  shift, and go to state 107
    "=="  shift, and go to state 108
    "!="  shift, and go to state 109

    ')'  [reduce using rule 39 (ARG)]


State 122

   53 EXPR: '(' EXPR ')' .

    $default  reduce using rule 53 (EXPR)


State 123

   56 ADDIOP: EXPR . '+' EXPR
   56       | EXPR '+' EXPR .
   57       | EXPR . '-' EXPR
   58 MULTOP: EXPR . '*' EXPR
   59       | EXPR . '/' EXPR
   60 RELAOP: EXPR . '>' EXPR
   61       | EXPR . '<' EXPR
   62       | EXPR . ">=" EXPR
   63       | EXPR . "<=" EXPR
   64 EQLTOP: EXPR . "==" EXPR
   65       | EXPR . "!=" EXPR

    '+'   shift, and go to state 100
    '-'   shift, and go to state 101
    '*'   shift, and go to state 102
    '/'   shift, and go to state 103
    '>'   shift, and go to state 104
    '<'   shift, and go to state 105
    ">="  shift, and go to state 106
    "<="  shift, and go to state 107
    "=="  shift, and go to state 108
    "!="  shift, and go to state 109

    '+'       [reduce using rule 56 (ADDIOP)]
    '-'       [reduce using rule 56 (ADDIOP)]
    '*'       [reduce using rule 56 (ADDIOP)]
    '/'       [reduce using rule 56 (ADDIOP)]
    '>'       [reduce using rule 56 (ADDIOP)]
    '<'       [reduce using rule 56 (ADDIOP)]
    ">="      [reduce using rule 56 (ADDIOP)]
    "<="      [reduce using rule 56 (ADDIOP)]
    "=="      [reduce using rule 56 (ADDIOP)]
    "!="      [reduce using rule 56 (ADDIOP)]
    $default  reduce using rule 56 (ADDIOP)


State 124

   56 ADDIOP: EXPR . '+' EXPR
   57       | EXPR . '-' EXPR
   57       | EXPR '-' EXPR .
   58 MULTOP: EXPR . '*' EXPR
   59       | EXPR . '/' EXPR
   60 RELAOP: EXPR . '>' EXPR
   61       | EXPR . '<' EXPR
   62       | EXPR . ">=" EXPR
   63       | EXPR . "<=" EXPR
   64 EQLTOP: EXPR . "==" EXPR
   65       | EXPR . "!=" EXPR

    '+'   shift, and go to state 100
    '-'   shift, and go to state 101
    '*'   shift, and go to state 102
    '/'   shift, and go to state 103
    '>'   shift, and go to state 104
    '<'   shift, and go to state 105
    ">="  shift, and go to state 106
    "<="  shift, and go to state 107
    "=="  shift, and go to state 108
    "!="  shift, and go to state 109

    '+'       [reduce using rule 57 (ADDIOP)]
    '-'       [reduce using rule 57 (ADDIOP)]
    '*'       [reduce using rule 57 (ADDIOP)]
    '/'       [reduce using rule 57 (ADDIOP)]
    '>'       [reduce using rule 57 (ADDIOP)]
    '<'       [reduce using rule 57 (ADDIOP)]
    ">="      [reduce using rule 57 (ADDIOP)]
    "<="      [reduce using rule 57 (ADDIOP)]
    "=="      [reduce using rule 57 (ADDIOP)]
    "!="      [reduce using rule 57 (ADDIOP)]
    $default  reduce using rule 57 (ADDIOP)


State 125

   56 ADDIOP: EXPR . '+' EXPR
   57       | EXPR . '-' EXPR
   58 MULTOP: EXPR . '*' EXPR
   58       | EXPR '*' EXPR .
   59       | EXPR . '/' EXPR
   60 RELAOP: EXPR . '>' EXPR
   61       | EXPR . '<' EXPR
   62       | EXPR . ">=" EXPR
   63       | EXPR . "<=" EXPR
   64 EQLTOP: EXPR . "==" EXPR
   65       | EXPR . "!=" EXPR

    '+'   shift, and go to state 100
    '-'   shift, and go to state 101
    '*'   shift, and go to state 102
    '/'   shift, and go to state 103
    '>'   shift, and go to state 104
    '<'   shift, and go to state 105
    ">="  shift, and go to state 106
    "<="  shift, and go to state 107
    "=="  shift, and go to state 108
    "!="  shift, and go to state 109

    '+'       [reduce using rule 58 (MULTOP)]
    '-'       [reduce using rule 58 (MULTOP)]
    '*'       [reduce using rule 58 (MULTOP)]
    '/'       [reduce using rule 58 (MULTOP)]
    '>'       [reduce using rule 58 (MULTOP)]
    '<'       [reduce using rule 58 (MULTOP)]
    ">="      [reduce using rule 58 (MULTOP)]
    "<="      [reduce using rule 58 (MULTOP)]
    "=="      [reduce using rule 58 (MULTOP)]
    "!="      [reduce using rule 58 (MULTOP)]
    $default  reduce using rule 58 (MULTOP)


State 126

   56 ADDIOP: EXPR . '+' EXPR
   57       | EXPR . '-' EXPR
   58 MULTOP: EXPR . '*' EXPR
   59       | EXPR . '/' EXPR
   59       | EXPR '/' EXPR .
   60 RELAOP: EXPR . '>' EXPR
   61       | EXPR . '<' EXPR
   62       | EXPR . ">=" EXPR
   63       | EXPR . "<=" EXPR
   64 EQLTOP: EXPR . "==" EXPR
   65       | EXPR . "!=" EXPR

    '+'   shift, and go to state 100
    '-'   shift, and go to state 101
    '*'   shift, and go to state 102
    '/'   shift, and go to state 103
    '>'   shift, and go to state 104
    '<'   shift, and go to state 105
    ">="  shift, and go to state 106
    "<="  shift, and go to state 107
    "=="  shift, and go to state 108
    "!="  shift, and go to state 109

    '+'       [reduce using rule 59 (MULTOP)]
    '-'       [reduce using rule 59 (MULTOP)]
    '*'       [reduce using rule 59 (MULTOP)]
    '/'       [reduce using rule 59 (MULTOP)]
    '>'       [reduce using rule 59 (MULTOP)]
    '<'       [reduce using rule 59 (MULTOP)]
    ">="      [reduce using rule 59 (MULTOP)]
    "<="      [reduce using rule 59 (MULTOP)]
    "=="      [reduce using rule 59 (MULTOP)]
    "!="      [reduce using rule 59 (MULTOP)]
    $default  reduce using rule 59 (MULTOP)


State 127

   56 ADDIOP: EXPR . '+' EXPR
   57       | EXPR . '-' EXPR
   58 MULTOP: EXPR . '*' EXPR
   59       | EXPR . '/' EXPR
   60 RELAOP: EXPR . '>' EXPR
   60       | EXPR '>' EXPR .
   61       | EXPR . '<' EXPR
   62       | EXPR . ">=" EXPR
   63       | EXPR . "<=" EXPR
   64 EQLTOP: EXPR . "==" EXPR
   65       | EXPR . "!=" EXPR

    '+'   shift, and go to state 100
    '-'   shift, and go to state 101
    '*'   shift, and go to state 102
    '/'   shift, and go to state 103
    '>'   shift, and go to state 104
    '<'   shift, and go to state 105
    ">="  shift, and go to state 106
    "<="  shift, and go to state 107
    "=="  shift, and go to state 108
    "!="  shift, and go to state 109

    '+'       [reduce using rule 60 (RELAOP)]
    '-'       [reduce using rule 60 (RELAOP)]
    '*'       [reduce using rule 60 (RELAOP)]
    '/'       [reduce using rule 60 (RELAOP)]
    '>'       [reduce using rule 60 (RELAOP)]
    '<'       [reduce using rule 60 (RELAOP)]
    ">="      [reduce using rule 60 (RELAOP)]
    "<="      [reduce using rule 60 (RELAOP)]
    "=="      [reduce using rule 60 (RELAOP)]
    "!="      [reduce using rule 60 (RELAOP)]
    $default  reduce using rule 60 (RELAOP)


State 128

   56 ADDIOP: EXPR . '+' EXPR
   57       | EXPR . '-' EXPR
   58 MULTOP: EXPR . '*' EXPR
   59       | EXPR . '/' EXPR
   60 RELAOP: EXPR . '>' EXPR
   61       | EXPR . '<' EXPR
   61       | EXPR '<' EXPR .
   62       | EXPR . ">=" EXPR
   63       | EXPR . "<=" EXPR
   64 EQLTOP: EXPR . "==" EXPR
   65       | EXPR . "!=" EXPR

    '+'   shift, and go to state 100
    '-'   shift, and go to state 101
    '*'   shift, and go to state 102
    '/'   shift, and go to state 103
    '>'   shift, and go to state 104
    '<'   shift, and go to state 105
    ">="  shift, and go to state 106
    "<="  shift, and go to state 107
    "=="  shift, and go to state 108
    "!="  shift, and go to state 109

    '+'       [reduce using rule 61 (RELAOP)]
    '-'       [reduce using rule 61 (RELAOP)]
    '*'       [reduce using rule 61 (RELAOP)]
    '/'       [reduce using rule 61 (RELAOP)]
    '>'       [reduce using rule 61 (RELAOP)]
    '<'       [reduce using rule 61 (RELAOP)]
    ">="      [reduce using rule 61 (RELAOP)]
    "<="      [reduce using rule 61 (RELAOP)]
    "=="      [reduce using rule 61 (RELAOP)]
    "!="      [reduce using rule 61 (RELAOP)]
    $default  reduce using rule 61 (RELAOP)


State 129

   56 ADDIOP: EXPR . '+' EXPR
   57       | EXPR . '-' EXPR
   58 MULTOP: EXPR . '*' EXPR
   59       | EXPR . '/' EXPR
   60 RELAOP: EXPR . '>' EXPR
   61       | EXPR . '<' EXPR
   62       | EXPR . ">=" EXPR
   62       | EXPR ">=" EXPR .
   63       | EXPR . "<=" EXPR
   64 EQLTOP: EXPR . "==" EXPR
   65       | EXPR . "!=" EXPR

    '+'   shift, and go to state 100
    '-'   shift, and go to state 101
    '*'   shift, and go to state 102
    '/'   shift, and go to state 103
    '>'   shift, and go to state 104
    '<'   shift, and go to state 105
    ">="  shift, and go to state 106
    "<="  shift, and go to state 107
    "=="  shift, and go to state 108
    "!="  shift, and go to state 109

    '+'       [reduce using rule 62 (RELAOP)]
    '-'       [reduce using rule 62 (RELAOP)]
    '*'       [reduce using rule 62 (RELAOP)]
    '/'       [reduce using rule 62 (RELAOP)]
    '>'       [reduce using rule 62 (RELAOP)]
    '<'       [reduce using rule 62 (RELAOP)]
    ">="      [reduce using rule 62 (RELAOP)]
    "<="      [reduce using rule 62 (RELAOP)]
    "=="      [reduce using rule 62 (RELAOP)]
    "!="      [reduce using rule 62 (RELAOP)]
    $default  reduce using rule 62 (RELAOP)


State 130

   56 ADDIOP: EXPR . '+' EXPR
   57       | EXPR . '-' EXPR
   58 MULTOP: EXPR . '*' EXPR
   59       | EXPR . '/' EXPR
   60 RELAOP: EXPR . '>' EXPR
   61       | EXPR . '<' EXPR
   62       | EXPR . ">=" EXPR
   63       | EXPR . "<=" EXPR
   63       | EXPR "<=" EXPR .
   64 EQLTOP: EXPR . "==" EXPR
   65       | EXPR . "!=" EXPR

    '+'   shift, and go to state 100
    '-'   shift, and go to state 101
    '*'   shift, and go to state 102
    '/'   shift, and go to state 103
    '>'   shift, and go to state 104
    '<'   shift, and go to state 105
    ">="  shift, and go to state 106
    "<="  shift, and go to state 107
    "=="  shift, and go to state 108
    "!="  shift, and go to state 109

    '+'       [reduce using rule 63 (RELAOP)]
    '-'       [reduce using rule 63 (RELAOP)]
    '*'       [reduce using rule 63 (RELAOP)]
    '/'       [reduce using rule 63 (RELAOP)]
    '>'       [reduce using rule 63 (RELAOP)]
    '<'       [reduce using rule 63 (RELAOP)]
    ">="      [reduce using rule 63 (RELAOP)]
    "<="      [reduce using rule 63 (RELAOP)]
    "=="      [reduce using rule 63 (RELAOP)]
    "!="      [reduce using rule 63 (RELAOP)]
    $default  reduce using rule 63 (RELAOP)


State 131

   56 ADDIOP: EXPR . '+' EXPR
   57       | EXPR . '-' EXPR
   58 MULTOP: EXPR . '*' EXPR
   59       | EXPR . '/' EXPR
   60 RELAOP: EXPR . '>' EXPR
   61       | EXPR . '<' EXPR
   62       | EXPR . ">=" EXPR
   63       | EXPR . "<=" EXPR
   64 EQLTOP: EXPR . "==" EXPR
   64       | EXPR "==" EXPR .
   65       | EXPR . "!=" EXPR

    '+'   shift, and go to state 100
    '-'   shift, and go to state 101
    '*'   shift, and go to state 102
    '/'   shift, and go to state 103
    '>'   shift, and go to state 104
    '<'   shift, and go to state 105
    ">="  shift, and go to state 106
    "<="  shift, and go to state 107
    "=="  shift, and go to state 108
    "!="  shift, and go to state 109

    '+'       [reduce using rule 64 (EQLTOP)]
    '-'       [reduce using rule 64 (EQLTOP)]
    '*'       [reduce using rule 64 (EQLTOP)]
    '/'       [reduce using rule 64 (EQLTOP)]
    '>'       [reduce using rule 64 (EQLTOP)]
    '<'       [reduce using rule 64 (EQLTOP)]
    ">="      [reduce using rule 64 (EQLTOP)]
    "<="      [reduce using rule 64 (EQLTOP)]
    "=="      [reduce using rule 64 (EQLTOP)]
    "!="      [reduce using rule 64 (EQLTOP)]
    $default  reduce using rule 64 (EQLTOP)


State 132

   56 ADDIOP: EXPR . '+' EXPR
   57       | EXPR . '-' EXPR
   58 MULTOP: EXPR . '*' EXPR
   59       | EXPR . '/' EXPR
   60 RELAOP: EXPR . '>' EXPR
   61       | EXPR . '<' EXPR
   62       | EXPR . ">=" EXPR
   63       | EXPR . "<=" EXPR
   64 EQLTOP: EXPR . "==" EXPR
   65       | EXPR . "!=" EXPR
   65       | EXPR "!=" EXPR .

    '+'   shift, and go to state 100
    '-'   shift, and go to state 101
    '*'   shift, and go to state 102
    '/'   shift, and go to state 103
    '>'   shift, and go to state 104
    '<'   shift, and go to state 105
    ">="  shift, and go to state 106
    "<="  shift, and go to state 107
    "=="  shift, and go to state 108
    "!="  shift, and go to state 109

    '+'       [reduce using rule 65 (EQLTOP)]
    '-'       [reduce using rule 65 (EQLTOP)]
    '*'       [reduce using rule 65 (EQLTOP)]
    '/'       [reduce using rule 65 (EQLTOP)]
    '>'       [reduce using rule 65 (EQLTOP)]
    '<'       [reduce using rule 65 (EQLTOP)]
    ">="      [reduce using rule 65 (EQLTOP)]
    "<="      [reduce using rule 65 (EQLTOP)]
    "=="      [reduce using rule 65 (EQLTOP)]
    "!="      [reduce using rule 65 (EQLTOP)]
    $default  reduce using rule 65 (EQLTOP)


State 133

   34 ASSIGN: ID '[' EXPR ']' '=' . EXPR ';'

    INTNUM    shift, and go to state 65
    FLOATNUM  shift, and go to state 66
    ID        shift, and go to state 67
    UNARY     shift, and go to state 68
    '('       shift, and go to state 69

    CALL    go to state 70
    EXPR    go to state 140
    UNOP    go to state 72
    ADDIOP  go to state 73
    MULTOP  go to state 74
    RELAOP  go to state 75
    EQLTOP  go to state 76
    ID_S    go to state 77


State 134

   36 CALL: ID '(' ARG ')' ';' .

    $default  reduce using rule 36 (CALL)


State 135

   38 ARG: EXPR ',' ARG .

    $default  reduce using rule 38 (ARG)


State 136

   42 FOR_S: FOR '(' ASSIGN ';' EXPR . ';' ASSIGN ')' STMT
   56 ADDIOP: EXPR . '+' EXPR
   57       | EXPR . '-' EXPR
   58 MULTOP: EXPR . '*' EXPR
   59       | EXPR . '/' EXPR
   60 RELAOP: EXPR . '>' EXPR
   61       | EXPR . '<' EXPR
   62       | EXPR . ">=" EXPR
   63       | EXPR . "<=" EXPR
   64 EQLTOP: EXPR . "==" EXPR
   65       | EXPR . "!=" EXPR

    ';'   shift, and go to state 141
    '+'   shift, and go to state 100
    '-'   shift, and go to state 101
    '*'   shift, and go to state 102
    '/'   shift, and go to state 103
    '>'   shift, and go to state 104
    '<'   shift, and go to state 105
    ">="  shift, and go to state 106
    "<="  shift, and go to state 107
    "=="  shift, and go to state 108
    "!="  shift, and go to state 109


State 137

   40 WHILE_S: WHILE '(' EXPR ')' STMT .

    $default  reduce using rule 40 (WHILE_S)


State 138

   41 WHILE_S: DO STMT WHILE '(' EXPR . ')' ';'
   56 ADDIOP: EXPR . '+' EXPR
   57       | EXPR . '-' EXPR
   58 MULTOP: EXPR . '*' EXPR
   59       | EXPR . '/' EXPR
   60 RELAOP: EXPR . '>' EXPR
   61       | EXPR . '<' EXPR
   62       | EXPR . ">=" EXPR
   63       | EXPR . "<=" EXPR
   64 EQLTOP: EXPR . "==" EXPR
   65       | EXPR . "!=" EXPR

    ')'   shift, and go to state 142
    '+'   shift, and go to state 100
    '-'   shift, and go to state 101
    '*'   shift, and go to state 102
    '/'   shift, and go to state 103
    '>'   shift, and go to state 104
    '<'   shift, and go to state 105
    ">="  shift, and go to state 106
    "<="  shift, and go to state 107
    "=="  shift, and go to state 108
    "!="  shift, and go to state 109


State 139

   43 IF_S: IF '(' EXPR ')' STMT . ELSE STMT
   44     | IF '(' EXPR ')' STMT .

    ELSE  shift, and go to state 143

    ELSE      [reduce using rule 44 (IF_S)]
    $default  reduce using rule 44 (IF_S)


State 140

   34 ASSIGN: ID '[' EXPR ']' '=' EXPR . ';'
   56 ADDIOP: EXPR . '+' EXPR
   57       | EXPR . '-' EXPR
   58 MULTOP: EXPR . '*' EXPR
   59       | EXPR . '/' EXPR
   60 RELAOP: EXPR . '>' EXPR
   61       | EXPR . '<' EXPR
   62       | EXPR . ">=" EXPR
   63       | EXPR . "<=" EXPR
   64 EQLTOP: EXPR . "==" EXPR
   65       | EXPR . "!=" EXPR

    ';'   shift, and go to state 144
    '+'   shift, and go to state 100
    '-'   shift, and go to state 101
    '*'   shift, and go to state 102
    '/'   shift, and go to state 103
    '>'   shift, and go to state 104
    '<'   shift, and go to state 105
    ">="  shift, and go to state 106
    "<="  shift, and go to state 107
    "=="  shift, and go to state 108
    "!="  shift, and go to state 109


State 141

   42 FOR_S: FOR '(' ASSIGN ';' EXPR ';' . ASSIGN ')' STMT

    ID  shift, and go to state 91

    ASSIGN  go to state 145


State 142

   41 WHILE_S: DO STMT WHILE '(' EXPR ')' . ';'

    ';'  shift, and go to state 146


State 143

   43 IF_S: IF '(' EXPR ')' STMT ELSE . STMT

    ID      shift, and go to state 42
    FOR     shift, and go to state 43
    WHILE   shift, and go to state 44
    DO      shift, and go to state 45
    IF      shift, and go to state 46
    RETURN  shift, and go to state 47
    '{'     shift, and go to state 38

    COMPOUNDSTMT  go to state 49
    STMT          go to state 147
    ASSIGN        go to state 51
    CALL          go to state 52
    WHILE_S       go to state 53
    FOR_S         go to state 54
    IF_S          go to state 55


State 144

   34 ASSIGN: ID '[' EXPR ']' '=' EXPR ';' .

    $default  reduce using rule 34 (ASSIGN)


State 145

   42 FOR_S: FOR '(' ASSIGN ';' EXPR ';' ASSIGN . ')' STMT

    ')'  shift, and go to state 148


State 146

   41 WHILE_S: DO STMT WHILE '(' EXPR ')' ';' .

    $default  reduce using rule 41 (WHILE_S)


State 147

   43 IF_S: IF '(' EXPR ')' STMT ELSE STMT .

    $default  reduce using rule 43 (IF_S)


State 148

   42 FOR_S: FOR '(' ASSIGN ';' EXPR ';' ASSIGN ')' . STMT

    ID      shift, and go to state 42
    FOR     shift, and go to state 43
    WHILE   shift, and go to state 44
    DO      shift, and go to state 45
    IF      shift, and go to state 46
    RETURN  shift, and go to state 47
    '{'     shift, and go to state 38

    COMPOUNDSTMT  go to state 49
    STMT          go to state 149
    ASSIGN        go to state 51
    CALL          go to state 52
    WHILE_S       go to state 53
    FOR_S         go to state 54
    IF_S          go to state 55


State 149

   42 FOR_S: FOR '(' ASSIGN ';' EXPR ';' ASSIGN ')' STMT .

    $default  reduce using rule 42 (FOR_S)
